#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

//noinspection GroovyAssignabilityCheck
properties([
        parameters([
                choice(name: 'ENVIRONMENT', choices: 'sandbox\nsaat\nsprod\nnonprod\nprod', description: 'Environment where code should be build and deployed')
        ])
])

List<LinkedHashMap<String, Object>> secrets = [
        secret('ccidam-idam-api-secret', 'IDAM_SECRET_CET'),
        secret('ccidam-idam-api-secret', 'IDAM_S2S_SECRET'),
        secret('postcode-service-url', 'POSTCODE_SERVICE_URL'),
        secret('postcode-service-token', 'POSTCODE_SERVICE_TOKEN'),
        secret('application-fee-code', 'APPLICATION_FEE_CODE'),
        secret('service-id', 'SERVICE_ID'),
        secret('site-id', 'SITE_ID')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

String product = "cet"
String component = "frontend"
String slot = "sandbox"
String serviceName = "${product}-${component}-${env}"
String slotString = "-${slot}"
env.TEST_E2E_FRONTEND_URL = "${serviceName}${slotString}.service.core-compute-${params.ENVIRONMENT}.internal"

withParameterizedPipeline('nodejs', product, component, params.ENVIRONMENT, slot) {
    after('build') {
        sh '''
    yarn setup
    printenv '''
    }

    loadVaultSecrets(secrets)
    /*
  after('functionalTest:saat') {
    sh "mkdir functional-output"
    sh "cp -r output/mochawesome.* functional-output/."
        publishHTML target: [
                reportDir            : "output/",
                reportFiles          : "mochawesome.html",
                reportName           : "SAAT Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }  */
}
